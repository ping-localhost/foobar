# options for analysis running
linters-settings:
  dogsled:
    # checks assignments with too many blank identifiers
    max-blank-identifiers: 2

  errcheck:
    # report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    check-type-assertions: true
    # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true

  gci:
    # Section configuration to compare against.
    sections:
      - standard # Standard section: captures all standard packages.
      - default # Default section: contains all imports that could not be matched to another section type.
      - prefix(github.com/ping-localhost/foobar) # Custom section: groups all imports with the specified Prefix.
      - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
      - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
    # Skip generated files.
    skip-generated: true
    # Enable custom order of sections.
    custom-order: true

  goconst:
    # minimal length of string constant
    min-len: 3
    # minimal occurrences count to trigger
    min-occurrences: 3

  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run` to see all tags and checks.
    # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - performance
      - style
      - experimental
    disabled-checks:
      - ifElseChain
      - typeAssertChain
      - unnamedResult
      - sloppyReassign

  gofmt:
    # simplify code: gofmt with `-s` option
    simplify: true

  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    local-prefixes: github.com/foobar

  govet:
    # enable or disable analyzers by name
    enable-all: true
    disable: [ fieldalignment, shadow ]

  maintidx:
    # Show functions with maintainability index lower than N.
    # A high index indicates better maintainability (it's kind of the opposite of complexity).
    # Default: 20
    under: 15

  nakedret:
    # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
    max-func-lines: 30

  prealloc:
    # Report pre-allocation suggestions only on simple loops that have no returns/breaks/continues/goto's in them.
    simple: true
    # Report pre-allocation suggestions on range loops
    range-loops: true
    # Report pre-allocation suggestions on for loops
    for-loops: true

  revive:
    # When set to false, ignores files with "GENERATED" header, similar to golint.
    # See https://github.com/mgechev/revive#available-rules for details.
    ignore-generated-header: true
    severity: warning

  stylecheck:
    # STxxxx checks in https://staticcheck.io/docs/configuration/options/#checks
    checks: [ "all", "-ST1003" ]
    # https://staticcheck.io/docs/configuration/options/#dot_import_whitelist
    dot-import-whitelist: [ ]
    # https://staticcheck.io/docs/configuration/options/#initialisms
    initialisms: [ ]
    # https://staticcheck.io/docs/configuration/options/#http_status_code_whitelist
    http-status-code-whitelist: [ "200", "400", "404", "500" ]

linters:
  disable-all: true
  enable:
    - asciicheck
    - bidichk
    - bodyclose
    - decorder
    - dogsled
    - dupword
    - errcheck
    - errchkjson
    - errorlint
    - exportloopref
    - forcetypeassert
    - gci
    - gochecknoglobals
    - gochecknoinits
    - goconst
    - gocritic
    - godot
    - gofmt
    - gofumpt
    - goheader
    - goimports
    - gomoddirectives
    - gomodguard
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - grouper
    - ineffassign
    - loggercheck
    - maintidx
    - makezero
    - nakedret
    - nolintlint
    - nonamedreturns
    - prealloc
    - predeclared
    - reassign
    - revive
    - staticcheck
    - stylecheck
    - tenv
    - testpackage
    - thelper
    - typecheck
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - whitespace

issues:
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing large codebase.
  # It's not practical to fix all existing issues at the moment of integration:
  # much better don't allow issues in new code.
  new: false

  # Which dirs to exclude: issues from them won't be reported.
  # Can use regexp here: `generated.*`, regexp is applied on full path,
  # including the path prefix if one is set.
  # Default dirs are skipped independently of this option's value (see exclude-dirs-use-default).
  # "/" will be replaced by current OS file path separator to properly work on Windows.
  exclude-dirs:
    - test/mocks/
    - static/
    - web/

  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - forcetypeassert
        - maintidx
        - scopelint
        - unused
        - dupword

    - path: _test\.go
      linters: [ govet ]
      text: unusedwrite

# output configuration options
output:
  # The formats used to render issues.
  # Format: `colored-line-number`, `line-number`, `json`, `colored-tab`, `tab`, `checkstyle`, `code-climate`, `junit-xml`, `github-actions`, `teamcity`
  # Output path can be either `stdout`, `stderr` or path to the file to write to.
  #
  # For the CLI flag (`--out-format`), multiple formats can be specified by separating them by comma.
  # The output can be specified for each of them by separating format name and path by colon symbol.
  # Example: "--out-format=checkstyle:report.xml,json:stdout,colored-line-number"
  # The CLI flag (`--out-format`) override the configuration file.
  #
  # Default:
  #   formats:
  #     - format: colored-line-number
  #       path: stdo
  formats: [ { format: colored-line-number } ]

  # Print lines of code with issue.
  print-issued-lines: false

  # Print linter name in the end of issue text.
  print-linter-name: true
